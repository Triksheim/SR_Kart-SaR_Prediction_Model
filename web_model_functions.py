try:
    from SAR_model_functions import (
        terrain_encoding,
        add_railway_data_to_terrain,
        add_building_data_to_terrain,
        add_trails_data_to_terrain,
        create_slope_matrix,
        combine_terrain_type_and_slope,
        branching_simulation,
        create_map_layer,
        calculate_map_extension,
        create_search_sectors_with_polygons
    )
    from utility import (
        plot_array,
        create_height_array,
        create_terrain_RGB_array,
        write_to_log_file
    )
    from geo_services import get_all_geo_data
    from constants import ModelConfig
except ImportError:
    from .SAR_model_functions import (
        terrain_encoding,
        add_railway_data_to_terrain,
        add_building_data_to_terrain,
        add_trails_data_to_terrain,
        create_slope_matrix,
        combine_terrain_type_and_slope,
        branching_simulation,
        create_map_layer,
        calculate_map_extension,
        create_search_sectors_with_polygons
    )
    from .utility import (
        plot_array,
        create_height_array,
        create_terrain_RGB_array,
        write_to_log_file
    )
    from .geo_services import get_all_geo_data
    from .constants import ModelConfig

import time
import numpy as np
import geopandas as gpd

# Functions for running the SAR model from the webserver


# Run from webserver
def collect_model_data(search_id, lat, lng, d25, d50, d75, base_dir):
    """
    Collects all data needed for the SAR model and saves it to directories.
    Callable from the webserver.

    Parameters:
    - search_id (str): The ID of the search.
    - lat (float): The latitude.
    - lng (float): The longitude.
    - d25 (float): The 25th percentile distance.
    - d50 (float): The 50th percentile distance.
    - d75 (float): The 75th percentile distance.
    - base_dir (str): The base directory where the data will be saved.

    Raises:
    - Exception: If an error occurs while collecting data.

    Returns:
    - None
    """
    
    config = ModelConfig(base_dir)
    with open(config.LOG_FILE, 'w') as f:
        f.write(f'SAR logfile: {search_id=}, {lat=}, {lng=}\n\n')

    try:
        get_model_data(search_id, lat, lng, d25, d50, d75, config)

    except Exception as e:
        print(f'Error: {e}')
        write_to_log_file(config.LOG_FILE, f'\n\nError: {e}\n\n')
        write_to_log_file(config.LOG_FILE, f'UNRESOLVEABLE ERROR OCCURED WHILE COLLECTING DATA.\n') 
        raise Exception(f'{e}')
            

# Run from webserver
def start_model(search_id, lat, lng, d25, d50, d75, base_dir, search_type=None):
    """
    Starts the SAR model by processing the model data and performing simulations.
    Callable from the webserver.
    
    Args:
        search_id (int): The ID of the search.
        lat (float): The latitude of the search location.
        lng (float): The longitude of the search location.
        d25 (float): The 25th percentile distance.
        d50 (float): The 50th percentile distance.
        d75 (float): The 75th percentile distance.
        base_dir (str): The base directory for the model.
        search_type (str, optional): The type of search. Defaults to None.
    
    Returns:
        layers (list): The map layers generated by the SAR model.
    """
    
    config = ModelConfig(base_dir=base_dir, winter=False, d25=d25, d50=d50, d75=d75, search_type=search_type)
    print(f'{search_type=}')
    write_to_log_file(config.LOG_FILE, f'{config.config_str()}\n')

    try:
        layers = process_model_data(search_id, lat, lng, d25, d50, d75, config)

    except Exception as e:
        print(f'Error: {e}')
        write_to_log_file(config.LOG_FILE, f'\n\nError: {e}\n\n')
        write_to_log_file(config.LOG_FILE, f'UNRESOLVEABLE ERROR OCCURED.\n')

    return layers


def generate_search_sectors(search_id, lat, lng, base_dir, bounds=None, sector_size=30_000):
    """
    Generates search sectors based on search area.
    Callable from the webserver.

    Args:
        search_id (int): The ID of the search.
        lat (float): The latitude of the search area.
        lng (float): The longitude of the search area.
        base_dir (str): The base directory for the model.
        bounds (shapely.geometry.Polygon, optional): The bounds of the search area. Defaults to None.
        sector_size (int, optional): The size of each search sector. Defaults to 30_000. (0.03 km^2)

    Returns:
        list: A list of sector polygons.

    Raises:
        Exception: If an error occurs during the generation of search sectors.
    """
    
    print(f'Generating search sectors...')
    config = ModelConfig(base_dir, sector_size=sector_size)
    write_to_log_file(config.LOG_FILE, f'{time.ctime()}: Generating search sectors...')

    terrain_score_matrix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_terrain_score_matrix.npy')
    coords = (lat, lng)

    if bounds:
        gdf = gpd.GeoDataFrame(index=[0], crs="EPSG:4326", geometry=[bounds])
    else:
        gdf = gpd.read_file(f'{config.OVERLAY_FOLDER}id{search_id}_red_{lat}_{lng}_EPSG4326.geojson')

    gdf.to_crs('EPSG:25833', inplace=True)
    hull_polygon = gdf.geometry[0]
    crs = 'EPSG:4326'

    try:
        sector_polygons = create_search_sectors_with_polygons(
            terrain_score_matrix, coords, hull_polygon, config.SECTOR_MAX_SIZE,
            config.REDUCTION_FACTOR, crs, config.SECTOR_FOLDER, search_id)
        write_to_log_file(config.LOG_FILE, f' done\n')
        print(f'Sectors created: {len(sector_polygons)}')
        return sector_polygons

    except Exception as e:
        print(f'Error: {e}')
        write_to_log_file(config.LOG_FILE, f'\n\nError: {e}\n\n')
        write_to_log_file(config.LOG_FILE, f'UNRESOLVEABLE ERROR OCCURED.\n')




def get_model_data(search_id, lat, lng, d25, d50, d75, config: ModelConfig):
    """
    Retrieves model data based on the given parameters.

    Parameters:
    - search_id (int): The ID of the search.
    - lat (float): The latitude of the location.
    - lng (float): The longitude of the location.
    - d25 (float): The distance at the 25th percentile.
    - d50 (float): The distance at the 50th percentile.
    - d75 (float): The distance at the 75th percentile.
    - config (ModelConfig): The configuration object containing various settings.

    Returns:
    None
    """
    start_time = time.perf_counter()
    radius_limit = 10000  # Maximum map size 20 km x 20 km
    map_size = min(d75, radius_limit) 

    # calculate map tile padding extention
    map_extension = calculate_map_extension(map_size, config.SQUARE_RADIUS)

    print(f'{map_extension=}')
    write_to_log_file(config.LOG_FILE, f'Collecting geo data...\n')
    write_to_log_file(config.LOG_FILE, f'Distance paramters: {d25=}, {d50=}, {d75=}, {map_extension=}\n')

    # Get geo data from API services
    get_all_geo_data(search_id, lat, lng, config.SQUARE_RADIUS, map_extension, config.BASE_DIR, config.REDUCTION_FACTOR, config.LOG_FILE)
    
    end_time = time.perf_counter()
    write_to_log_file(config.LOG_FILE, f'Data collection done - Time: {end_time-start_time:.2f}\n\n')
    
    



def process_model_data(search_id, lat, lng, d25, d50, d75, config: ModelConfig):
    """
    Process model data for SAR modeling and perform simulation.

    Args:
        search_id (int): The ID of the search.
        lat (float): The latitude.
        lng (float): The longitude.
        d25 (float): The 25th percentile distance.
        d50 (float): The 50th percentile distance.
        d75 (float): The 75th percentile distance.
        config (ModelConfig): The configuration object.

    Returns:
        tuple: A tuple containing the layers for 25th, 50th, and 75th percentile distances.
    """

    # Rasterize and encode terrain data
    print(f'Processing model data for id: {search_id}')
    write_to_log_file(f'{config.LOG_FILE}', f'Processing model data...\n')

    start_time = time.perf_counter()

    # Create height array
    write_to_log_file(f'{config.LOG_FILE}', f'Creating height array...')
    create_height_array(f'{config.BASE_DIR}id{search_id}_{lat}_{lng}_height_composite.tif', config.ARRAY_FOLDER,
                        config.REDUCTION_FACTOR, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')

    # Create terrain RGB array
    write_to_log_file(f'{config.LOG_FILE}', f'Creating terrain RGB array...')
    create_terrain_RGB_array(f'{config.BASE_DIR}id{search_id}_{lat}_{lng}_terrain_composite.tif',
                            config.ARRAY_FOLDER,config.REDUCTION_FACTOR, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')

   
    # Encode terrain type values
    write_to_log_file(f'{config.LOG_FILE}', f'Encoding terrain types...')
    terrain_rgb_file = f'{config.ARRAY_FOLDER}id{search_id}_terrain_RGB_matrix.npy'
    terrain_encoding(config.TERRAIN_TYPE, config.TERRAIN_RGB, terrain_rgb_file,
                      config.ARRAY_FOLDER, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')


    
    # Add railways
    write_to_log_file(f'{config.LOG_FILE}', f'Adding railways...')
    print("Adding railways to terrain data...")
    terrain_type_matrix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_terrain_type_matrix.npy')
    railway_files = [f'id{search_id}_osm_railway_data.npy']
    add_railway_data_to_terrain(terrain_type_matrix, railway_files, config.ARRAY_FOLDER,
                                 config.RAILWAY, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')


    # Add buildings
    print("Adding buildings to terrain data...")
    write_to_log_file(f'{config.LOG_FILE}', f'Adding buildings...')
    terrain_type_matrix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_terrain_type_matrix.npy')
    building_files = [f'id{search_id}_osm_building_data.npy']
    add_building_data_to_terrain(terrain_type_matrix, building_files, config.ARRAY_FOLDER,
                                  config.BUILDING, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')


    # Add trails
    print("Adding trails to terrain data...")
    write_to_log_file(f'{config.LOG_FILE}', f'Adding trails...')
    terrain_type_matrix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_terrain_type_matrix.npy')
    trail_file_gn = f'id{search_id}_gn_trail_data.npy'
    trail_file_osm = f'id{search_id}_osm_trail_data.npy'
    trail_files = [trail_file_gn, trail_file_osm]
    add_trails_data_to_terrain(terrain_type_matrix, trail_files, config.ARRAY_FOLDER,
                                config.TRAIL, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')

    
    # Calculate slopes
    print("Calculating slopes...")
    write_to_log_file(f'{config.LOG_FILE}', f'Calculating slopes...')
    height_matrix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_height_matrix.npy')
    slope_matrix = create_slope_matrix(height_matrix, config.NORMALIZE_CAP, config.SQUARE_FACTOR, config.ARRAY_FOLDER, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')
    
    
    # Combine terrain and slope matrix
    print("Combining terrain and slope matrix...")
    write_to_log_file(f'{config.LOG_FILE}', f'Creating terrain score matrix...')
    terrain_type_matrix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_terrain_type_matrix.npy')
    terrain_score_marix = combine_terrain_type_and_slope(terrain_type_matrix, slope_matrix, config.COMBINATION_METHOD,
                                    config.ARRAY_FOLDER, search_id)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')

    # Logging terrain score matrix png
    plot_array(array=terrain_score_marix, save=True, folder=config.LOG_DIR, title="Terrain score matrix")
    
    # End of data processing
    end_time = time.perf_counter()
    write_to_log_file(f'{config.LOG_FILE}', f'Data processing done - Time: {end_time-start_time:.2f}\n\n')


    # Start of simulation

    # Branching simulation
    print("Branching simulation started...")
    write_to_log_file(f'{config.LOG_FILE}', f'Simulation started...  ')
    terrain_score_marix = np.load(f'{config.ARRAY_FOLDER}id{search_id}_terrain_score_matrix.npy')
    start_time = time.perf_counter()
    red_points, yellow_points, green_points = branching_simulation(terrain_score_marix, d25, d50, d75, config)
    end_time = time.perf_counter()

    write_to_log_file(f'{config.LOG_FILE}', f'Simulation done - Time: {end_time-start_time:.2f}\n\n')

    

    
    # Calcuate polygons based on simulation
    print("Creating map overlays...")
    write_to_log_file(f'{config.LOG_FILE}', f'Creating map overlays...')
    start_coords = (lat, lng)
    (layer_25,layer_50,layer_75) = create_map_layer(terrain_score_marix, start_coords, red_points, yellow_points, green_points, config.OVERLAY_FOLDER, search_id, config)
    write_to_log_file(f'{config.LOG_FILE}', f' done\n')

    
    write_to_log_file(f'{config.LOG_FILE}', f'\nSAR model finished\n\n')

    return (layer_25,layer_50,layer_75)
    